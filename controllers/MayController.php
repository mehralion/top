<?php
namespace controllers;
use components\slim\Slim;
use controllers\_base\WebController;
use models\User;

/**
 * Created by PhpStorm.
 * User: nnikitchenko
 * Date: 18.11.2015
 *
 */
class MayController extends WebController
{
    protected $action_type = 'may';
    protected $image = 'https://i.oldbk.com/i/i/item2016_signhero_%d.png';
	protected $year = null;

	protected $_user_ids_ignore = [
		95673, 53373, 630645, 540875, 317377, 689608, 47918, 294342,
		339510, 14797, 58138, 262023
	];

	public function __construct(Slim $container, $action, $year = 2016)
	{
		$this->year = (int)$year;

		$this->action_type = 'may'.$this->year;
		if($year == 2016) {
			$this->action_type = 'may';
		}

		parent::__construct($container, $action);
	}

	public function beforeAction($action)
	{
		if(in_array($action, array('search'))) {
			$this->cache = false;
		}
		return parent::beforeAction($action); // TODO: Change the autogenerated stub
	}

    public function indexAction()
    {
        $db = $this->app->db;

        $rows = $db->createQuery()
            ->select('u.*, u.znak as rate_value')
            ->from('users u')
            ->where('u.bot=0 AND u.klan!="radminion" and u.klan!="Adminion"')
            ->where('u.znak > 0')
			->where('u.id not in ('.implode(',', $this->_user_ids_ignore).')')
            ->orderBy('rate_value desc, id asc')
            ->limit(100)
            ->execute()
            ->fetchAll();

        $html = $this->render('index', array(
            'rows'      => $rows,
            'image'     => $this->image,
            'user_id'   => $this->app->webUser->isGuest() ? false : $this->app->webUser->getUser()->id,
			'year'		=> $this->year,
        ));
        $this->app->cache->set($this->getKeyCache(), $html, 360);

        return $html;
    }

    public function searchAction()
    {
        $login = $this->app->request->post('login');
//        $login = iconv('utf-8', 'windows-1251', $login);
		$user = User::find('login = ?', array($login))->asArray();
        if(!$user) {
            return $this->renderJSON(array('message' => sprintf('%s не входит в топ 100', $login)));
        }

        $db = $this->app->db;
        $UserPosition = $db->createQuery()
            ->select('count(u.id) as cnt')
            ->from('users u')
            ->where('u.bot=0 and u.klan!="radminion" and u.klan!="Adminion"')
            ->where('u.znak > ?', array($user['znak']))
			->where('u.id not in ('.implode(',', $this->_user_ids_ignore).')')
            ->execute()
            ->fetch();
        if(!$UserPosition) {
            return $this->renderJSON(array('message' => sprintf('%s не входит в топ 100', $login)));
        }
        $position_temp = $UserPosition['cnt'];

        $UserPosition = $db->createQuery()
            ->select('count(u.id) as cnt')
            ->from('users u')
            ->where('u.bot=0 and u.klan!="radminion" and u.klan!="Adminion"')
            ->where('u.znak = ? and u.id < ?', array($user['znak'], $user['id']))
			->where('u.id not in ('.implode(',', $this->_user_ids_ignore).')')
            ->execute()
            ->fetch();
        $rate_position = $position_temp + $UserPosition['cnt'] + 1;
        if($rate_position == 0 || $rate_position > 100) {
            return $this->renderJSON(array('message' => sprintf('%s не входит в топ 100', $login)));
        }

        $img_num = 1;
        if ($rate_position > 10 && $rate_position < 51) {
            $img_num = 2;
        } elseif ($rate_position > 50 && $rate_position < 101) {
            $img_num = 3;
        }

        $html = $this->renderPartial('search', array(
            'image' => $this->prepareImg($user, $img_num),
            'user' => $user,
            'value' => $user['znak'],
            'position' => $rate_position,
        ));

        return $this->renderJSON(array(
            'html' => $html
        ));
    }

    protected function prepareImg($user, $position)
    {
        return sprintf($this->image, $position);
    }

	protected function getKeyCache()
	{
		return sprintf('html_%s_%s_%s', $this->getControllerId(), $this->actionId, $this->year);
	}
}