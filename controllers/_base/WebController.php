<?php
namespace controllers\_base;

use components\slim\Middleware\ClientScript\ClientScript;
use helpers\Json;
use models\EventRating;
use models\TopList;

/**
 * Class WebController
 * @package controllers\_base
 */
class WebController extends BaseController
{
    /** @var string */
    protected $layout = 'main';
    /** @var TopList */
    public $menu;
    /** @var TopList[] */
    public $menu_list = array();
    /** @var EventRating[] */
    public $rating_list = array();

    /**
     * @param $action
     * @return bool
     * @throws \Exception
     * @throws \ReflectionException
     */
    public function beforeAction($action)
    {
        if($this->app->config('gzip')) {
            $this->startGzip();
        }

        $this->htmlCache = $this->app->cache->get($this->getKeyCache());
        if($this->htmlCache === null || $this->cache === false) {

            $this->app->clientScript
                ->registerJsFile('/asset/jquery/jquery.min.js', ClientScript::JS_POSITION_BEGIN)
                ->registerJsFile('/asset/ga/ga.js', ClientScript::JS_POSITION_BEGIN)
                ->registerJsFile('/asset/rate/js/url.js', ClientScript::JS_POSITION_BEGIN)
                ->registerJsFile('/asset/bootstrap/js/bootstrap.bundle.js', ClientScript::JS_POSITION_END)
                ->registerJsFile('/asset/scrollup/dist/jquery.scrollUp.min.js', ClientScript::JS_POSITION_END)
                ->registerJsFile('/asset/scrollpos-styler/scrollPosStyler.js', ClientScript::JS_POSITION_END)
                ->registerJsFile('/asset/rate/js/rate.js', ClientScript::JS_POSITION_END);

            $this->app->clientScript
                ->registerCssFile('/asset/bootstrap/css/bootstrap.min.css')
                ->registerCssFile('/asset/adaptive/css/img.css')
                ->registerCssFile('/asset/iconic/css/open-iconic-bootstrap.min.css')
                ->registerCssFile('/asset/adaptive/css/kp-new-style.css')
                ->registerCssFile('/asset/rate/css/rate.css');

            $this->menu_list = TopList::findAll(array(
                'condition' => 'is_enabled = 1',
                'order' => 'position asc'
            ))->asModel();
            $this->menu = TopList::findCurrent($this->getControllerId(), $action);
            if($this->menu && !$this->menu->is_enabled) {
                throw new \Exception();
            }

            if(isset($_GET['debug']) && $_GET['debug'] == 'debug') {
				$this->rating_list = EventRating::findAll([
					'condition' => 'is_enabled = 1'
				])->asModel();
			}
        }

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * @param $action
     */
    public function afterAction($action)
    {
        parent::afterAction($action); // TODO: Change the autogenerated stub

        if($this->app->config('gzip')) {
            $this->endGzip();
        }
    }

    /**
     * @param $_view
     * @param null $_data_
     * @return string
     * @throws \ReflectionException
     */
    public function renderPartial($_view, $_data_ = null)
    {
        $this->app->view()
            ->setControllerId($this->getControllerId())
            ->setController($this);
        return $this->app->view()->renderPartial($_view, $_data_);
    }

    /**
     * @param $link
     * @param int $code
     */
    protected function redirect($link, $code = 301)
    {
        $this->app->redirect($link, $code);
    }

    /**
     * @param array $data
     * @return string
     */
    public function renderJSON(array $data)
    {
        return Json::encode($data);
    }

    /**
     * @param $_view
     * @param null $_data_
     * @return string
     * @throws \Exception
     */
    public function render($_view, $_data_ = null)
    {
        $html = $this->app->view()
            ->setControllerId($this->getControllerId())
            ->setController($this)
            ->setLayout($this->layout)
            ->render($_view, $_data_);

        return $html;
    }

    /**
     *
     */
    protected function startGzip()
    {
        if (strpos(' ' . $_SERVER['HTTP_ACCEPT_ENCODING'], 'x-gzip') !== false) {
            $miniBB_gzipper_encoding = 'x-gzip';
        }
        if (strpos(' ' . $_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') !== false) {
            $miniBB_gzipper_encoding = 'gzip';
        }
        if (isset($miniBB_gzipper_encoding)) {
            ob_start();
        }
    }

    /**
     *
     */
    protected function endGzip()
    {
        if (strpos(' ' . $_SERVER['HTTP_ACCEPT_ENCODING'], 'x-gzip') !== false) {
            $miniBB_gzipper_encoding = 'x-gzip';
        }
        if (strpos(' ' . $_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') !== false) {
            $miniBB_gzipper_encoding = 'gzip';
        }

        if (isset($miniBB_gzipper_encoding)) {
            $miniBB_gzipper_in = ob_get_contents();
            $miniBB_gzipper_inlenn = strlen($miniBB_gzipper_in);
            $miniBB_gzipper_out = gzencode($miniBB_gzipper_in, 2);
            $miniBB_gzipper_lenn = strlen($miniBB_gzipper_out);
            $miniBB_gzipper_in_strlen = strlen($miniBB_gzipper_in);
            $gzpercent = $miniBB_gzipper_in_strlen ? ($miniBB_gzipper_lenn / $miniBB_gzipper_in_strlen) * 100 : 0;
            $percent = round($gzpercent);
            $miniBB_gzipper_in = str_replace('<!- GZipper_Stats ->', 'Original size: '.strlen($miniBB_gzipper_in).' GZipped size: '.$miniBB_gzipper_lenn.' Ð¡ompression: '.$percent.'%<hr>', $miniBB_gzipper_in);
            $miniBB_gzipper_out = gzencode($miniBB_gzipper_in, 2);
            ob_clean();
            header('Content-Encoding: '.$miniBB_gzipper_encoding);

            echo $miniBB_gzipper_out;
        }
    }

    /**
     * @return string
     * @throws \ReflectionException
     */
    protected function getKeyCache()
    {
        return sprintf('html_%s_%s', $this->getControllerId(), $this->actionId);
    }
}