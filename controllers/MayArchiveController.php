<?php
namespace controllers;
use components\slim\Slim;
use controllers\_base\WebController;
use models\topsites\UserZnak;
use models\User;

/**
 * Created by PhpStorm.
 * User: nnikitchenko
 * Date: 18.11.2015
 *
 */
class MayArchiveController extends WebController
{
    protected $action_type = 'may';
    protected $image = 'https://i.oldbk.com/i/i/item2016_signhero_%d.png';
	protected $year = null;
	//protected $cache = false;

	public function __construct(Slim $container, $action, $year = 2016)
	{
		$this->year = (int)$year;

		$this->action_type = 'may'.$this->year;
		if($year == 2016) {
			$this->action_type = 'may';
		}

		parent::__construct($container, $action);
	}

	public function beforeAction($action)
	{
		if(in_array($action, array('search'))) {
			$this->cache = false;
		}
		return parent::beforeAction($action); // TODO: Change the autogenerated stub
	}

    public function indexAction()
    {
        $db = $this->get('db_top');

		$user_ids = $temp_rows = $rows = [];
		$temp = $db->createQuery()
			->select('u.user_id, u.znak as rate_value')
			->from('user_znak u')
			->where('u.year = ?', [$this->year])
			//->where('u.bot=0 AND u.klan!="radminion" and u.klan!="Adminion"')
			->orderBy('rate_value desc, id asc')
			->limit(100)
			->execute()
			->fetchAll();

        foreach ($temp as $_item) {
			$temp_rows[$_item['user_id']] = [
				'rate_value' => $_item['rate_value']
			];
			$user_ids[] = $_item['user_id'];
		}

		if($user_ids) {
			$users = User::findAll('id in ('.User::getIN($user_ids).')', $user_ids)->asArray();
			foreach ($users as $_user) {
				$rows[$_user['id']] = array_merge($temp_rows[$_user['id']], $_user);
			}
		}

        $html = $this->render('archive/index', array(
            'rows'      => $rows,
            'image'     => $this->image,
            'user_id'   => false,
			'year'		=> $this->year,
        ));
        $this->app->cache->set($this->getKeyCache(), $html, 360);

        return $html;
    }

    public function searchAction()
    {
        $login = $this->app->request->post('login');
//		$login = iconv('utf-8', 'windows-1251', $login);
        $user = User::find('login = ?', array($login))->asArray();
        if(!$user) {
            return $this->renderJSON(array('message' => sprintf('%s не входит в топ 100', $login)));
        }
        $znak = UserZnak::find('user_id = ?', $user['id'])->asArray();
		if(!$znak) {
			return $this->renderJSON(array('message' => sprintf('%s не входит в топ 100', $login)));
		}


		$db = $this->get('db_top');
        $UserPosition = $db->createQuery()
            ->select('count(u.id) as cnt')
            ->from('user_znak u')
			->where('u.year = ?', [$this->year])
            //->where('u.bot=0 and u.klan!="radminion" and u.klan!="Adminion"')
            ->where('u.znak > ?', array($znak['znak']))
            ->execute()
            ->fetch();
        if(!$UserPosition) {
            return $this->renderJSON(array('message' => sprintf('%s не входит в топ 100', $login)));
        }
        $position_temp = $UserPosition['cnt'];

        $UserPosition = $db->createQuery()
            ->select('count(u.id) as cnt')
            ->from('user_znak u')
			->where('u.year = ?', [$this->year])
            //->where('u.bot=0 and u.klan!="radminion" and u.klan!="Adminion"')
            ->where('u.znak = ? and u.id < ?', array($znak['znak'], $user['id']))
            ->execute()
            ->fetch();
        $rate_position = $position_temp + $UserPosition['cnt'] + 1;
        if($rate_position == 0 || $rate_position > 100) {
            return $this->renderJSON(array('message' => sprintf('%s не входит в топ 100', $login)));
        }

        $img_num = 1;
        if ($rate_position > 10 && $rate_position < 51) {
            $img_num = 2;
        } elseif ($rate_position > 50 && $rate_position < 101) {
            $img_num = 3;
        }

        $html = $this->renderPartial('archive/search', array(
            'image' => $this->prepareImg($user, $img_num),
            'user' => $user,
            'value' => $znak['znak'],
            'position' => $rate_position,
			'year'		=> $this->year,
        ));

        return $this->renderJSON(array(
            'html' => $html
        ));
    }

	protected function getControllerId()
	{
		return 'may';
	}

    protected function prepareImg($user, $position)
    {
        return sprintf($this->image, $position);
    }

	protected function getKeyCache()
	{
		return sprintf('html_%s_%s_%s', $this->getControllerId(), $this->actionId, $this->year);
	}

	public function populateAction()
	{
		return;
		$Users = User::findAll('znak > 0', [], ['id' ,'znak'])->asArray();
		foreach ($Users as $User) {
			$_data = [
				'user_id' => $User['id'],
				'znak' => $User['znak'],
				'year' => 2017,
			];
			UserZnak::insert($_data);
		}
		echo 'done';
	}

	public function restartAction()
	{
		return;
		User::update(array('znak' => 0), 'znak > 0');
		echo 'done';
	}
}